<?php

namespace App;

use Illuminate\Database\Eloquent\Model;
use Milon\Barcode\DNS1D;

class Article extends Model
{
    protected $fillable = ['name', 'description', 'sold', 'barcode'];
    protected $attributes = [
        'barcode' => '2000000000008'
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        Article::saved(function (Article $article) {
           if(strlen($article->barcode)<13 && isset($article->id)) {
               $article->barcode = self::generateEAN($article->id);
               $article->save();
           }
        });
    }

    public static function generateEAN($number)
    {
        $code = '200' . str_pad($number, 9, '0');
        $weightflag = true;
        $sum = 0;
        // Weight for a digit in the checksum is 3, 1, 3.. starting from the last digit.
        // loop backwards to make the loop length-agnostic. The same basic functionality
        // will work for codes of different lengths.
        for ($i = strlen($code) - 1; $i >= 0; $i--)
        {
            $sum += (int)$code[$i] * ($weightflag?3:1);
            $weightflag = !$weightflag;
        }
        $code .= (10 - ($sum % 10)) % 10;
        return $code;
    }

    public function getBase64Ean13()
    {
        return "data:image/png;base64,". DNS1D::getBarcodePNG($this->barcode, "EAN13",2,33);
    }
}
